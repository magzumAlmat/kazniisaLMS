"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/store/slices/authSlice.js":
/*!***************************************!*\
  !*** ./src/store/slices/authSlice.js ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReviseReducer: function() { return /* binding */ ReviseReducer; },\n/* harmony export */   addBannerAction: function() { return /* binding */ addBannerAction; },\n/* harmony export */   addCompanyAction: function() { return /* binding */ addCompanyAction; },\n/* harmony export */   addCompanyReducer: function() { return /* binding */ addCompanyReducer; },\n/* harmony export */   addFullProfileDataAction: function() { return /* binding */ addFullProfileDataAction; },\n/* harmony export */   addReviseForBannerAction: function() { return /* binding */ addReviseForBannerAction; },\n/* harmony export */   addWatermarkToImageAction: function() { return /* binding */ addWatermarkToImageAction; },\n/* harmony export */   authSlice: function() { return /* binding */ authSlice; },\n/* harmony export */   authorize: function() { return /* binding */ authorize; },\n/* harmony export */   clearError: function() { return /* binding */ clearError; },\n/* harmony export */   clearUploadProgress: function() { return /* binding */ clearUploadProgress; },\n/* harmony export */   createTeacherAction: function() { return /* binding */ createTeacherAction; },\n/* harmony export */   createUserAction: function() { return /* binding */ createUserAction; },\n/* harmony export */   editVar: function() { return /* binding */ editVar; },\n/* harmony export */   getAllBanners: function() { return /* binding */ getAllBanners; },\n/* harmony export */   getAllBannersReducer: function() { return /* binding */ getAllBannersReducer; },\n/* harmony export */   getAllCompanies: function() { return /* binding */ getAllCompanies; },\n/* harmony export */   getAllCompaniesReducer: function() { return /* binding */ getAllCompaniesReducer; },\n/* harmony export */   getAllCoursesAction: function() { return /* binding */ getAllCoursesAction; },\n/* harmony export */   getAllCoursesReducer: function() { return /* binding */ getAllCoursesReducer; },\n/* harmony export */   getAllRevisesReducer: function() { return /* binding */ getAllRevisesReducer; },\n/* harmony export */   getBannerByCompanyIdAction: function() { return /* binding */ getBannerByCompanyIdAction; },\n/* harmony export */   getBannerByCompanyIdReducer: function() { return /* binding */ getBannerByCompanyIdReducer; },\n/* harmony export */   getCourseByIdAction: function() { return /* binding */ getCourseByIdAction; },\n/* harmony export */   getCurrentCoursesReducer: function() { return /* binding */ getCurrentCoursesReducer; },\n/* harmony export */   getUserInfo: function() { return /* binding */ getUserInfo; },\n/* harmony export */   loginAction: function() { return /* binding */ loginAction; },\n/* harmony export */   loginInspectorAction: function() { return /* binding */ loginInspectorAction; },\n/* harmony export */   loginReducer: function() { return /* binding */ loginReducer; },\n/* harmony export */   logout: function() { return /* binding */ logout; },\n/* harmony export */   logoutAction: function() { return /* binding */ logoutAction; },\n/* harmony export */   sendCodeReducer: function() { return /* binding */ sendCodeReducer; },\n/* harmony export */   sendCodeToEmailAction: function() { return /* binding */ sendCodeToEmailAction; },\n/* harmony export */   sendErrorReducer: function() { return /* binding */ sendErrorReducer; },\n/* harmony export */   sendUserDataReducer: function() { return /* binding */ sendUserDataReducer; },\n/* harmony export */   setCurrentUser: function() { return /* binding */ setCurrentUser; },\n/* harmony export */   setError: function() { return /* binding */ setError; },\n/* harmony export */   setUploadProgress: function() { return /* binding */ setUploadProgress; },\n/* harmony export */   useTokenInitialization: function() { return /* binding */ useTokenInitialization; },\n/* harmony export */   verifyCodeAction: function() { return /* binding */ verifyCodeAction; }\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @reduxjs/toolkit */ \"(app-pages-browser)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _components_config_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/components/config/index */ \"(app-pages-browser)/./src/components/config/index.js\");\n/* harmony import */ var jwt_decode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jwt-decode */ \"(app-pages-browser)/./node_modules/jwt-decode/build/jwt-decode.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-redux */ \"(app-pages-browser)/./node_modules/react-redux/es/index.js\");\n\n\n\n\n\n // Import useDispatch\nconst initialState = {\n    isAuth: false,\n    currentUser: null,\n    currentCompany: null,\n    someVar: \"blah blah blah\",\n    authToken: \"\",\n    codeFromServer: \"none\",\n    bannersById: \"\",\n    allBanners: \"\",\n    allCompanies: [],\n    allRevises: \"\",\n    error: \"\",\n    uploadProgress: 0,\n    courses: [],\n    currentCourse: []\n};\nlet token;\nif (true) {\n    token = localStorage.getItem(\"token\");\n}\n// export const authSlice = createSlice({\n//   name: 'auth',\n//   initialState,\n//   reducers: {\n//     authorize: (state, action) => {\n//       localStorage.setItem('token', action.payload.token);\n//       axios.defaults.headers.common['Authorization'] = `Bearer ${action.payload.token}`;\n//       // axios.defaults.headers.common['Authorization'] = `Bearer ${action.payload.token}`;\n//       const decoded = jwt_decode(action.payload.token);\n//       state.currentUser = {\n//         id: decoded.id,\n//         email: decoded.email,\n//         name: decoded.name,\n//         username: decoded.username,\n//         password: decoded.password,\n//       };\n//       state.isAuth = true;\n//     },\n//     logout: (state) => {\n//       // Clear user-related state when logging out\n//       localStorage.removeItem('token'); // Remove the token from localStorage\n//       axios.defaults.headers.common['Authorization'] = ''; // Remove Authorization header\n//       state.currentUser = null;\n//       state.isAuth = false;\n//     },\n//   },\n// });\nconst authSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__.createSlice)({\n    name: \"auth\",\n    initialState,\n    reducers: {\n        setError: (state, action)=>{\n            state.error = action.payload;\n        },\n        clearError: (state)=>{\n            state.error = null;\n        },\n        setUploadProgress: (state, action)=>{\n            state.uploadProgress = action.payload;\n        },\n        clearUploadProgress: (state)=>{\n            state.uploadProgress = 0;\n        },\n        sendErrorReducer: (state, action)=>{\n            // console.log('sendErrorReducer error=',action)\n            console.log(\"sendErrorReducer error=\", action.payload);\n            state.error = action.payload;\n        },\n        loginReducer: (state, action)=>{\n            localStorage.setItem(\"token\", action.payload.token);\n            axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].defaults.headers.common[\"Authorization\"] = \"Bearer \".concat(action.payload.token);\n            // axios.defaults.headers.common['Authorization'] = `Bearer ${action.payload.token}`;\n            const decoded = (0,jwt_decode__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(action.payload.token);\n            console.log(\"decoded data = \", decoded);\n            state.currentUser = {\n                id: decoded.id,\n                email: decoded.email,\n                name: decoded.name,\n                username: decoded.username,\n                password: decoded.password\n            };\n            state.isAuth = true;\n            console.log(\"this is currentUser- \", state.currentUser, \"isAuth=\", state.isAuth);\n        },\n        // loginReducer: (state, action) => {\n        //   const token = action.payload.token;\n        //   localStorage.setItem('token', token);\n        //   const decoded = jwt_decode(token);\n        //   state.currentUser = {\n        //     id: decoded.id,\n        //     email: decoded.email,\n        //     name: decoded.name,\n        //     username: decoded.username,\n        //   };\n        //   state.isAuth = true;\n        // },\n        logout: (state)=>{\n            localStorage.removeItem(\"token\");\n            state.currentUser = null;\n            state.isAuth = false;\n        },\n        ReviseReducer: (state, action)=>{\n            console.log(\"1.3 ReviseReducer\", action.payload);\n            state.allRevises = action.payload;\n        },\n        getAllRevisesReducer: (state, action)=>{\n            console.log(\"1.3 ReviseReducer\", action.payload);\n            state.allRevises = action.payload;\n        },\n        getAllCompaniesReducer: (state, data)=>{\n            const existingPostIds = state.allCompanies.map((post)=>post.id);\n            // Фильтруйте новые посты, чтобы исключить дубликаты\n            const newPosts = data.payload.filter((newPost)=>!existingPostIds.includes(newPost.id));\n            console.log(\"New posts from reducer\", newPosts);\n            // Добавьте только новые посты в state.allPosts\n            state.allCompanies.push(...newPosts);\n            console.log(\"All companies from reducer\", state.allCompanies);\n        // console.log('1.3 getAllBannersReducerr-',action.payload)\n        // state.allCompanies.push(...action.payload)\n        },\n        getAllBannersReducer: (state, action)=>{\n            console.log(\"1.3 getAllBannersReducerr-\", action.payload);\n            state.allBanners = action.payload;\n            console.log(\"1.3 getAllBannersReducer-\", state.bannersById);\n        },\n        getBannerByCompanyIdReducer: (state, action)=>{\n            console.log(\"1.3 getBannerByCompanyIdReducer-\", action.payload);\n            state.bannersById = action.payload;\n            console.log(\"1.3 getBannerByCompanyIdReducer-\", state.bannersById);\n        },\n        setCurrentUser: (state, action)=>{\n            console.log(\"1.3 setCurrentUser\", action.payload);\n            state.currentUser = action.payload;\n            console.log(\"1.4 CURRENT  USER CHANGED IN setCurrentUser\", state.currentUser);\n            state.currentCompany = action.payload.companyId;\n        },\n        authorize: (state, action)=>{\n            state.someVar = action.payload;\n            state.authToken = null;\n            state.authToken = action.payload;\n        // console.log('PAYLOAD=',action.payload.token,'codeFromServer=',state.currentUser)\n        // const decoded = jwt_decode(action.payload.token);\n        // console.log('1 authorize decoded token=========', decoded)\n        // localStorage.setItem(\"token\", action.payload.token);\n        // axios.defaults.headers.common['Authorization'] = `Bearer ${action.payload.token}`;\n        // // axios.defaults.headers.common['Authorization'] = `Bearer ${action.payload.token}`; // Add space after 'Bearer'\n        // const decoded = jwt_decode(action.payload.token);\n        // console.log('decoded token=========', decoded)\n        // };\n        },\n        loginAuthorize: (state, action)=>{\n            state.someVar = action.payload;\n            console.log(\"PAYLOAD=\", action.payload, \"codeFromServer=\", state.currentUser);\n        },\n        sendCodeReducer: (state, action)=>{\n            // console.log('SendCodeReducer token from profileMyposts'.action.payload)\n            localStorage.setItem(\"token\", action.payload.token);\n            axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].defaults.headers.common[\"Authorization\"] = \"Bearer \".concat(action.payload.token);\n            // axios.defaults.headers.common['Authorization'] = `Bearer ${action.payload.token}`; // Add space after 'Bearer'\n            const decoded = (0,jwt_decode__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(action.payload.token);\n            console.log(\"decoded token=========\", decoded);\n            state.authToken = {\n                id: decoded.id,\n                email: decoded.email,\n                code: decoded.code,\n                name: decoded.name,\n                phone: decoded.phone,\n                lastname: decoded.lastname,\n                companyId: decoded.companyId\n            };\n            state.currentUser = {\n                id: decoded.id,\n                email: decoded.email,\n                code: decoded.code,\n                name: decoded.name,\n                phone: decoded.phone,\n                lastname: decoded.lastname,\n                companyId: decoded.companyId\n            };\n            state.isAuth = true;\n        },\n        sendUserDataReducer: (state, action)=>{\n            console.log(\" 1 SendDataReducer token from sendDataUserReducer\", action.payload);\n            state.currentUser = action.payload;\n            console.log(\" 2 SendDataReducer state changed\", state.currentUser);\n        //   state.currentUser = state.allPosts.map(item => {\n        //     if(item.id === data.payload.postId) {\n        //         item.commentaries.push(data.payload)\n        //         return item\n        //     } \n        //     return item\n        // })\n        // localStorage.setItem(\"token\", state.currentUser);\n        // axios.defaults.headers.common['Authorization'] = `Bearer ${action.payload.token}`;\n        // console.log('decoded token=========', localStorage.getItem(\"token\"))\n        // state.currentUser = {\n        //   id: decoded.id,\n        //   email: decoded.email,\n        // };\n        // state.isAuth = true;\n        },\n        addCompanyReducer: (state, action)=>{\n            // state.currentCompany = action.payload;\n            console.log(\"AddCompanyReducer Started\", action.payload);\n        },\n        logout: (state)=>{\n            console.log(\"Logut start\");\n            localStorage.removeItem(\"token\"); // Remove the token from localStorage\n            axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].defaults.headers.common[\"Authorization\"] = \"\"; // Remove Authorization header\n            state.currentUser = null;\n            state.isAuth = false;\n            state.authToken = null;\n        },\n        getAllCoursesReducer: (state, action)=>{\n            state.courses = action.payload;\n        },\n        getCurrentCoursesReducer: (state, action)=>{\n            state.currentCourse = action.payload;\n        }\n    }\n});\n// Action creators are generated for each case reducer function\nconst { getAllCoursesReducer, setError, clearError, setUploadProgress, clearUploadProgress, sendErrorReducer, getCurrentCoursesReducer, getAllRevisesReducer, ReviseReducer, authorize, logout, editVar, sendCodeReducer, sendUserDataReducer, setCurrentUser, getBannerByCompanyIdReducer, getAllBannersReducer, loginReducer, addCompanyReducer, getAllCompaniesReducer } = authSlice.actions;\n// Use useEffect for token initialization\n// export const useTokenInitialization = () => {\n//   const dispatch = useDispatch();\n//   useEffect(() => {\n//     if (token) {\n//       let decodedToken = jwt_decode(token);\n//       // Create a new state object and set properties\n//       const newState = {\n//         ...initialState,\n//         isAuth: true,\n//         currentUser: {\n//           id: decodedToken.id,\n//           email: decodedToken.email,\n//           name: decodedToken.name,\n//           password: decodedToken.password,\n//           username: decodedToken.username,\n//         },\n//       };\n//       axios.post(`${END_POINT}/api/auth/login`, {\n//         email: decodedToken.email,\n//         password: decodedToken.password,\n//       }).then((res) => {\n//         dispatch(login(res.data));\n//       });\n//       // Dispatch the login action with the new state\n//       dispatch(login(newState));\n//     } else {\n//       localStorage.removeItem('token');\n//     }\n//   }, [token, dispatch]);\n//   console.log('Token не найден');\n//   return null;\n// };\nconst getCourseByIdAction = (id)=>async (dispatch)=>{\n        console.log(\"1 getCourseByIdAction started  id=\", id);\n        const response = await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].get(\"http://localhost:4000/api/courses/\".concat(id), {\n        }).then((response)=>{\n            console.log(\"1.2 getcoursebyid response \", response.data);\n            dispatch(getCurrentCoursesReducer(response.data));\n        });\n    };\nconst getAllCoursesAction = ()=>async (dispatch)=>{\n        console.log(\"1 getAllRevises started\");\n        const response = await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].get(\"\".concat(_components_config_index__WEBPACK_IMPORTED_MODULE_0__[\"default\"], \"/api/courses\"), {\n        }).then((response)=>{\n            console.log(\"1.2 getAllCompanies response \", response.data);\n            dispatch(getAllCoursesReducer(response.data));\n        });\n    };\nconst getAllCompanies = ()=>async (dispatch)=>{\n        console.log(\"1 getAllBanner started\", token);\n        const response = await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].get(\"\".concat(_components_config_index__WEBPACK_IMPORTED_MODULE_0__[\"default\"], \"/api/auth/getallcompanies\"), {\n            headers: {\n                \"Authorization\": \"Bearer \".concat(token),\n                \"Content-Type\": \"application/json\"\n            }\n        }).then((response)=>{\n            console.log(\"1.2 getAllCompanies RESPONSE \", response.data);\n            dispatch(getAllCompaniesReducer(response.data));\n        });\n    };\nconst getAllBanners = ()=>async (dispatch)=>{\n        console.log(\"1 getAllBanner started\");\n        const response = await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].get(\"\".concat(_components_config_index__WEBPACK_IMPORTED_MODULE_0__[\"default\"], \"/api/banner/getall\"), {\n            headers: {\n                \"Authorization\": \"Bearer \".concat(token),\n                \"Content-Type\": \"application/json\"\n            }\n        }).then((response)=>{\n            console.log(\"1.2 getBannerByCompanyId response \", response.data);\n            dispatch(getAllBannersReducer(response.data));\n        });\n    };\nconst getBannerByCompanyIdAction = (companyId)=>async (dispatch)=>{\n        console.log(\"1 getBannerByCompanyId started\");\n        console.log(\"1.1 COMPANYID======\", companyId);\n        const response = await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].get(\"\".concat(_components_config_index__WEBPACK_IMPORTED_MODULE_0__[\"default\"], \"/api/banner/getbycompanyid/\").concat(companyId), {\n            headers: {\n                \"Authorization\": \"Bearer \".concat(token),\n                \"Content-Type\": \"application/json\"\n            }\n        }).then((response)=>{\n            console.log(\"1.2 getBannerByCompanyId response \", response.data);\n            dispatch(getBannerByCompanyIdReducer(response.data));\n        });\n    };\nconst getUserInfo = async (dispatch)=>{\n    console.log(\"1 getUserInFo started\");\n    const response = await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].get(\"\".concat(_components_config_index__WEBPACK_IMPORTED_MODULE_0__[\"default\"], \"/api/auth/getAuthentificatedUserInfo\"), {\n        headers: {\n            \"Authorization\": \"Bearer \".concat(token),\n            \"Content-Type\": \"application/json\"\n        }\n    }).then((response)=>{\n        console.log(\"1.2 getUserInFo response \", response.data);\n        dispatch(setCurrentUser(response.data));\n    });\n};\nconst useTokenInitialization = (dispatch)=>{\n    return null;\n};\nconst createUserAction = (param)=>{\n    let { email, password } = param;\n    return async (dispatch)=>{\n        console.log(\"1 createUser запустился \", email, password);\n        dispatch({\n            type: \"REGISTER_USER_REQUEST\"\n        }); // Запрос начат\n        try {\n            // Проверка, существует ли пользователь с таким email\n            const checkUserResponse = await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].get(\"http://localhost:4000/api/auth/check-email?email=\".concat(email));\n            if (checkUserResponse.data.exists) {\n                // Если пользователь с таким email уже существует\n                dispatch({\n                    type: \"REGISTER_USER_FAILURE\",\n                    payload: \"Пользователь с таким email уже существует\"\n                });\n                console.log(\"Существует такой email\");\n                return; // Прерываем выполнение функции\n            }\n            // Если пользователя с таким email нет, продолжаем регистрацию\n            await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].post(\"http://localhost:4000/api/register\", {\n                email,\n                password,\n                roleId: 2\n            });\n        } catch (error) {\n            var _error_response_data, _error_response;\n            // Обработка ошибок сети или сервера\n            dispatch({\n                type: \"REGISTER_USER_FAILURE\",\n                payload: ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.error) || error.message\n            });\n        }\n    };\n};\nconst createTeacherAction = (param)=>{\n    let { email, password } = param;\n    return async (dispatch)=>{\n        console.log(\"1 createUser запустился \", email, password);\n        dispatch({\n            type: \"REGISTER_USER_REQUEST\"\n        }); // Запрос начат\n        try {\n            // Проверка, существует ли пользователь с таким email\n            const checkUserResponse = await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].get(\"http://localhost:4000/api/auth/check-email?email=\".concat(email));\n            if (checkUserResponse.data.exists) {\n                // Если пользователь с таким email уже существует\n                dispatch({\n                    type: \"REGISTER_USER_FAILURE\",\n                    payload: \"Пользователь с таким email уже существует\"\n                });\n                console.log(\"Существует такой email\");\n                return; // Прерываем выполнение функции\n            }\n            // Если пользователя с таким email нет, продолжаем регистрацию\n            await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].post(\"http://localhost:4000/api/register\", {\n                email,\n                password,\n                roleId: 3\n            });\n        } catch (error) {\n            var _error_response_data, _error_response;\n            // Обработка ошибок сети или сервера\n            dispatch({\n                type: \"REGISTER_USER_FAILURE\",\n                payload: ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.error) || error.message\n            });\n        }\n    };\n};\n// export const createTeacherAction = ({email, password}) => async(dispatch) => {\n//   console.log('1 creatTeacher запустился ', email, password);\n//   dispatch({ type: 'REGISTER_USER_REQUEST' }); // Запрос начат\n//   try {\n//     // Отправка данных на сервер\n//     const response = await axios.post('http://localhost:4000/api/auth/sendmail', {\n//         email: email,\n//         name: 'notcompleted',\n//         lastname: 'notcompleted',\n//         phone:'+2342454535',\n//         password: password,\n//         roleId:3\n//     });\n//     // Если регистрация успешна\n//     if (response.status === 201) {\n//       dispatch({\n//         type: 'REGISTER_USER_SUCCESS',\n//         payload: response.data.message, // Сообщение от сервера\n//       });\n//     } else {\n//       // Если сервер вернул ошибку\n//       dispatch({\n//         type: 'REGISTER_USER_FAILURE',\n//         payload: response.data.error || 'Ошибка при регистрации',\n//       });\n//     }\n//   } catch (error) {\n//     // Обработка ошибок сети или сервера\n//     dispatch({\n//       type: 'REGISTER_USER_FAILURE',\n//       payload: error.response?.data?.error || error.message,\n//     });\n//   }\n//   // await axios.post(`http://localhost:4000/api/auth/sendmail`, {\n//   //   email: email,\n//   //   name: 'not completed',\n//   //   lastname: 'not completed',\n//   //   phone:'2342454535',\n//   //   password: password,\n//   // }).then((res) => {\n//   //   dispatch(authorize(res.data));\n//   // }).catch((error)=>{\n//   //   console.log('error')\n//   // });\n// };\nconst loginInspectorAction = (email, password)=>async (dispatch)=>{\n        // axios.defaults.headers.common['Authorization'] = `Bearer ${action.payload.token}`;\n        console.log(\"loginAction  start\", email, password);\n        // console.log('1 AutheUser запустился ', email, password);\n        await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].post(\"\".concat(_components_config_index__WEBPACK_IMPORTED_MODULE_0__[\"default\"], \"/api/auth/login\"), {\n            email: email,\n            password: password\n        }).then((res)=>{\n            console.log(\"response from loginAction \", res);\n            dispatch(loginReducer(res.data));\n        });\n    };\nconst loginAction = (param)=>{\n    let { email, password } = param;\n    return async (dispatch)=>{\n        // axios.defaults.headers.common['Authorization'] = `Bearer ${action.payload.token}`;\n        console.log(\"1 loginAction  start\", email, password);\n        // console.log('1 AutheUser запустился ', email, password);\n        await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].post(\"http://localhost:4000/api/auth/login\", {\n            email: email,\n            password: password\n        }).then((res)=>{\n            console.log(\"response from loginAction \", res);\n            dispatch(loginReducer(res.data));\n        });\n    };\n};\nconst sendCodeToEmailAction = (email)=>async (dispatch)=>{\n        // axios.defaults.headers.common['Authorization'] = `Bearer ${action.payload.token}`;\n        // console.log('auth user start')\n        // console.log('1 AutheUser запустился ', email, password);\n        await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].post(\"\".concat(_components_config_index__WEBPACK_IMPORTED_MODULE_0__[\"default\"], \"/api/auth/sendmail\"), {\n            email: email\n        }).then((res)=>{\n            console.log(\"response \", res);\n            dispatch(authorize(res.data));\n        });\n    };\nconst verifyCodeAction = (email, code)=>async (dispatch)=>{\n        // axios.defaults.headers.common['Authorization'] = `Bearer ${action.payload.token}`;\n        console.log(\"VerifuCodeAction started\", email, typeof email, code, typeof code);\n        // console.log('1 AutheUser запустился ', email, password);\n        await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].post(\"\".concat(_components_config_index__WEBPACK_IMPORTED_MODULE_0__[\"default\"], \"/api/auth/verifycode\"), {\n            email: email,\n            fullcode: code\n        }).then((res)=>{\n            console.log(\"response from verifyCodeAction \", res.data);\n            localStorage.setItem(\"token\", res.data);\n            dispatch(sendCodeReducer(res.data));\n        });\n    };\n// export const addWatermarkToImageAction=(images)=>async(dispatch)=>{\n// console.log('addWatermarkToImageAction Started images=',images)\n//   const token = localStorage.getItem(\"token\");\n//   const formData = new FormData();\n//   formData.append('images', images[0]);\n//   formData.append('images', images[1]);\n//   let sometext='text from shareFUNCTION'\n//   // console.log('FORMDATA before pass to redux',formData)\n//   // for (const value of formData.values()) {\n//   //     console.log('addWatermarkToImageAction  formData Values',value);\n//   //   }\n//   // console.log('1 createPostSlice | createPostFunc запустился ');\n//   if (!token) {\n//     // Handle the case where the token is not available or invalid\n//     console.error('Token not available');\n//     return;\n// }\n//   try {\n//     const data = {\n//      images\n//     };\n//     console.log('Token from addFullProfileDataAction=',token,'addFullProfileDataAction Started formData=',data.images)\n//     const response = await axios.post(\n//       `${END_POINT}/api/banner/addimagecode`,\n//       formData,\n//       {\n//         headers: {\n//           // 'Authorization': `Bearer ${token}`,\n//           'Content-Type': 'multipart/form-data', // Set the content type to JSON\n//         },\n//       }\n//     );\n//     console.log('Data uploaded successfully:', response.data);\n//     // dispatch(sendUserDataReducer(response.data))\n//     // Handle success, e.g., dispatch an action to update state\n//   } catch (error) {\n//     console.log('erro from auth Slicer=',error.response.data.message)\n//       await dispatch(sendErrorReducer(error.response.data))\n//     // Handle errors, e.g., by returning an error object or dispatching an error action\n//     console.error('Error uploading data:', error);\n//     // You can dispatch an error action here if needed.\n//   }}\nconst addWatermarkToImageAction = (images, updateUploadProgress)=>async (dispatch)=>{\n        const token = localStorage.getItem(\"token\");\n        const formData = new FormData();\n        formData.append(\"images\", images[0]);\n        formData.append(\"images\", images[1]);\n        if (!token) {\n            console.error(\"Token not available\");\n            return;\n        }\n        try {\n            const config = {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                },\n                onUploadProgress: (progressEvent)=>{\n                    const percentage = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n                    dispatch(setUploadProgress(percentage));\n                    if (updateUploadProgress) {\n                        updateUploadProgress(percentage);\n                    }\n                }\n            };\n            const response = await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].post(\"\".concat(_components_config_index__WEBPACK_IMPORTED_MODULE_0__[\"default\"], \"/api/banner/addimagecode\"), formData, config);\n            console.log(\"Data uploaded successfully:\", response.data);\n            dispatch(sendUserDataReducer(response.data));\n            dispatch(updateUploadProgress(100)); // Set the progress to 100% on success\n        } catch (error) {\n            console.error(\"Error uploading data:\", error);\n            await dispatch(sendErrorReducer(error.response.data));\n        }\n    };\nconst addFullProfileDataAction = (password, phone, name, lastname)=>async (dispatch)=>{\n        console.log(\"addFullProfileDataAction started\", password, phone, name, lastname);\n        const token = localStorage.getItem(\"token\");\n        const formData = new FormData();\n        formData.append(\"password\", password);\n        formData.append(\"phone\", phone);\n        formData.append(\"name\", name);\n        formData.append(\"lastname\", lastname);\n        let sometext = \"text from shareFUNCTION\";\n        // console.log('FORMDATA before pass to redux',formData)\n        for (const value of formData.values()){\n            console.log(\"addFullProfileDataAction  formData Values\", value);\n        }\n        // console.log('1 createPostSlice | createPostFunc запустился ');\n        if (!token) {\n            // Handle the case where the token is not available or invalid\n            console.error(\"Token not available\");\n            return;\n        }\n        try {\n            const data = {\n                password,\n                phone,\n                name,\n                lastname\n            };\n            console.log(\"Token from addFullProfileDataAction=\", token, \"addFullProfileDataAction Started formData=\", data.password);\n            const response = await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].post(\"\".concat(_components_config_index__WEBPACK_IMPORTED_MODULE_0__[\"default\"], \"/api/auth/addfullprofile\"), data.password, {\n                headers: {\n                    \"Authorization\": \"Bearer \".concat(token),\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            console.log(\"Data uploaded successfully:\", response.data);\n            dispatch(sendUserDataReducer(response.data));\n        // Handle success, e.g., dispatch an action to update state\n        } catch (error) {\n            console.log(\"erro from auth Slicer=\", error.response.data.message);\n            await dispatch(sendErrorReducer(error.response.data));\n            // Handle errors, e.g., by returning an error object or dispatching an error action\n            console.error(\"Error uploading data:\", error);\n        // You can dispatch an error action here if needed.\n        }\n    };\nconst addCompanyAction = (name, description, bin, address, contactEmail, contactPhone, isUR)=>async (dispatch)=>{\n        console.log(\"addFullProfileDataAction started\", name, description, bin, address, contactEmail, contactPhone, isUR);\n        const token = localStorage.getItem(\"token\");\n        const formData = new FormData();\n        formData.append(\"name\", name);\n        formData.append(\"description\", description);\n        formData.append(\"bin\", bin);\n        formData.append(\"address\", address);\n        formData.append(\"contactEmail\", contactEmail);\n        formData.append(\"contactPhone\", contactPhone);\n        formData.append(\"isUR\", isUR);\n        let sometext = \"text from shareFUNCTION\";\n        // console.log('FORMDATA before pass to redux',formData)\n        for (const value of formData.values()){\n            console.log(\"addFullProfileDataAction  formData Values\", value);\n        }\n        if (!token) {\n            // Handle the case where the token is not available or invalid\n            console.error(\"Token not available\");\n            return;\n        }\n        try {\n            const data = {\n                name,\n                description,\n                bin,\n                address,\n                contactPhone,\n                contactEmail,\n                isUR\n            };\n            console.log(\"Token from addFullProfileDataAction=\", token, \"addFullProfileDataAction Started formData=\", data.name);\n            const response = await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].post(\"\".concat(_components_config_index__WEBPACK_IMPORTED_MODULE_0__[\"default\"], \"/api/auth/createcompany\"), data.name, {\n                headers: {\n                    \"Authorization\": \"Bearer \".concat(token),\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            console.log(\"Data uploaded successfully:\", response.data);\n            dispatch(addCompanyReducer(response.data));\n        // Handle success, e.g., dispatch an action to update state\n        } catch (error) {\n            await dispatch(sendErrorReducer(error.response.data));\n            // Handle errors, e.g., by returning an error object or dispatching an error action\n            console.error(\"Error uploading data:\", error);\n        // You can dispatch an error action here if needed.\n        }\n    };\nconst addBannerAction = (formData)=>async (dispatch)=>{\n        console.log(\"addFullProfileDataAction started\", formData);\n        const token = localStorage.getItem(\"token\");\n        for (const value of formData.values()){\n            console.log(\"formData Values\", value);\n        }\n        if (!token) {\n            console.error(\"Token not available\");\n            return;\n        }\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].post(\"\".concat(_components_config_index__WEBPACK_IMPORTED_MODULE_0__[\"default\"], \"/api/banner\"), formData, {\n                headers: {\n                    \"Authorization\": \"Bearer \".concat(token),\n                    \"Content-Type\": \"multipart/form-data\"\n                }\n            });\n            console.log(\"Data uploaded successfully:\", response.data);\n        // Handle success, e.g., dispatch an action to update state\n        } catch (error) {\n            console.error(\"Error uploading data:\", error);\n        // Handle errors, e.g., by returning an error object or dispatching an error action\n        }\n    };\nconst addReviseForBannerAction = (formData, bannerId)=>async (dispatch)=>{\n        try {\n            const token = localStorage.getItem(\"token\");\n            if (!token) {\n                console.error(\"Token not available\");\n                return;\n            }\n            const response = await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].post(\"\".concat(_components_config_index__WEBPACK_IMPORTED_MODULE_0__[\"default\"], \"/api/revise/\").concat(bannerId), formData, {\n                headers: {\n                    Authorization: \"Bearer \".concat(token),\n                    \"Content-Type\": \"multipart/form-data\"\n                }\n            });\n            console.log(\"Data uploaded successfully:\", response.data);\n            // Dispatch an action to update state or handle the response as needed\n            dispatch(ReviseReducer(response.data));\n        } catch (error) {\n            console.error(\"Error uploading data:\", error);\n        // Handle errors, e.g., by returning an error object or dispatching an error action\n        }\n    };\nconst logoutAction = ()=>(dispatch)=>{\n        // console.log('logoutAction started/');\n        dispatch(logout());\n    };\n/* harmony default export */ __webpack_exports__[\"default\"] = (authSlice.reducer);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/store/slices/authSlice.js\n"));

/***/ })

});